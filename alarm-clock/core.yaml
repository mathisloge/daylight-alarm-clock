# To be able to get logs from the device via serial and api.
logger:

# API is a requirement of the dashboard import.
api:

time:
  - id: global_time
    platform: homeassistant
    on_time_sync:
      - lvgl.label.update:
          id: nav_clock
          text:
            time_format: "%A %H:%M"
            time: global_time
      - lvgl.label.update:
          id: home_clock
          text:
            time_format: "%H:%M"
            time: global_time

    on_time:
      - minutes: "*"
        seconds: 0
        then:
          - lvgl.label.update:
              id: nav_clock
              text:
                time_format: "%A %H:%M"
                time: global_time
          - lvgl.label.update:
              id: home_clock
              text:
                time_format: "%H:%M"
                time: global_time
      - hours: 2,3,4,5
        minutes: 5
        seconds: 0
        then:
          - switch.turn_on: switch_antiburn
      - hours: 2,3,4,5
        minutes: 35
        seconds: 0
        then:
          - switch.turn_off: switch_antiburn

datetime:
  - platform: template
    id: next_alarm_datetime
    name: "Alarm time"
    entity_category: config
    time_id: global_time
    optimistic: true
    restore_value: true
    type: time
    on_time:
      - lambda: |-
          ESP_LOGD("main", "alarm triggered");
      - script.execute: turn_on_alarm
    on_value:
      then:
        - lambda: |-
            auto next_alarm = id(global_time).now();
            if (!next_alarm.is_valid()) { return; }
            next_alarm.hour = x.hour;
            next_alarm.minute = x.minute;
            next_alarm.second = x.second;
            next_alarm.recalc_timestamp_utc();

            const time_t daytime_start = next_alarm.timestamp - static_cast<int>(id(minutes_daytime_effect).state * 60.0);
            auto call = id(daytime_start_datetime).make_call();
            call.set_time(ESPTime::from_epoch_utc(daytime_start));
            call.perform();

        - lvgl.label.update:
            id: ui_alarm_settings_hh_label
            text:
              format: "%02d"
              args: ["x.hour"]

        - lvgl.label.update:
            id: ui_alarm_settings_mm_label
            text:
              format: "%02d"
              args: ["x.minute"]

        - lvgl.label.update:
            id: alarm_time_text
            text:
              format: "%02d:%02d"
              args: ["x.hour", "x.minute"]

  - platform: template
    id: daytime_start_datetime
    name: "Daytime start timepoint"
    entity_category: diagnostic
    restore_value: true
    optimistic: true
    type: time
    on_time:
      - lambda: |-
          ESP_LOGD("main", "Daytime effect starting...");
      - light.dim_relative:
          id: light_daylight
          relative_brightness: 100%
          transition_length: !lambda "return id(minutes_daytime_effect).state * 60.0 * 1000.0;"
          brightness_limits:
            min_brightness: 0%
            max_brightness: 100%
            limit_mode: CLAMP

switch:
  # Whether or not the alarm is active.
  - platform: template
    id: alarm_active_switch
    name: "Alarm active"
    icon: "mdi:alarm"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      - lvgl.widget.update:
          id: ui_alarm_settings_alarm_active
          state:
            checked: true
      - lvgl.widget.enable: alarm_time_text

    on_turn_off:
      - lvgl.widget.update:
          id: ui_alarm_settings_alarm_active
          state:
            checked: false
      - lvgl.widget.disable: alarm_time_text
      - speaker_media_player.play_local_media_file: alarm_music

  # true or false whether the alarm behavior should play
  - platform: template
    id: alarm_ringing
    name: "Alarm ringing"
    restore_mode: ALWAYS_OFF
    entity_category: diagnostic
    on_turn_on:
      - script.execute: show_alarm_page
      - script.execute: play_alarm_music
    on_turn_off:
      - script.execute: hide_alarm_page
      - script.stop: play_alarm_music
    optimistic: true

  - platform: template
    name: Antiburn
    id: switch_antiburn
    icon: mdi:television-shimmer
    optimistic: true
    entity_category: diagnostic
    turn_on_action:
      - logger.log: "Starting Antiburn"
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:
      - lvgl.pause:
          show_snow: true
    turn_off_action:
      - logger.log: "Stopping Antiburn"
      - if:
          condition: lvgl.is_paused
          then:
            - lvgl.resume:
            - lvgl.widget.redraw:

binary_sensor:
  - platform: status
    name: Status

number:
  - platform: template
    id: snooze_time_in_minutes
    name: "Snooze Time in Minutes"
    entity_category: config
    mode: box
    initial_value: 10
    min_value: 0.1
    max_value: 30
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    id: max_alarm_time_in_minutes
    name: "Max Alarm Time in Minutes"
    entity_category: config
    mode: box
    initial_value: 5
    min_value: 0.1
    max_value: 60
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    id: minutes_daytime_effect
    name: "Minutes for daytime effect"
    entity_category: config
    mode: box
    initial_value: 30
    min_value: 0
    max_value: 60
    step: 1
    optimistic: true
    restore_value: true

  - platform: template
    name: "Screen timeout"
    entity_category: config
    optimistic: true
    id: display_timeout
    unit_of_measurement: "s"
    initial_value: 45
    restore_value: true
    min_value: 10
    max_value: 180
    step: 5
    mode: box

script:
  ## Turn on the alarm.
  - id: turn_on_alarm
    mode: single
    then:
      - if:
          condition:
            switch.is_on: alarm_active_switch
          then:
            - logger.log: "Turn on alarm"
            - switch.turn_on: alarm_ringing
            - script.execute: resume_lvgl
            - delay: !lambda "return id(max_alarm_time_in_minutes).state * 60.0 * 1000.0;"
            - script.execute: turn_off_alarm
          else:
            - logger.log: "Alarm triggered but isn't active. Skipping."

  - id: turn_off_alarm
    then:
      - script.stop: turn_on_alarm
      - switch.turn_off: alarm_ringing
      - media_player.stop

  - id: do_snooze
    mode: single
    then:
      - if:
          condition:
            switch.is_on: alarm_active_switch
          then:
            - logger.log: "Snoozing..."
            - script.execute: turn_off_alarm
            - delay: !lambda "return id(snooze_time_in_minutes).state * 60.0 * 1000.0;"
            - logger.log: "Snooze finished. Trigger alarm again"
            - script.execute: turn_on_alarm

  - id: play_alarm_music
    mode: single
    then:
      - media_player.volume_set: 30%
      - while:
          condition:
            switch.is_on: alarm_ringing
          then:
            - logger.log: "Play alarm music"
            - speaker_media_player.play_local_media_file: alarm_music
            - wait_until:
                media_player.is_playing
            - wait_until:
                media_player.is_idle
            - media_player.volume_up

  - id: resume_lvgl
    mode: single
    then:
      - if:
          condition: lvgl.is_paused
          then:
            - logger.log: "LVGL resuming"
            - lvgl.resume:
            - lvgl.widget.redraw:
            - light.turn_on: display_backlight
